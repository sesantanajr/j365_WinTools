# C:\Scripts\Jornada365_WindowsTools.ps1
# Purpose: Post-installation script for Windows with GUI for selecting and executing installations and updates
# Title: Jornada 365 - Windows Tools

# Add necessary assemblies for Windows Forms and Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Initialize global checkbox array
$global:checkboxes = @()

# Function to create UI elements
function New-UIElement {
    param (
        [string]$type,
        [hashtable]$properties,
        [scriptblock]$onClick = $null
    )
    $element = New-Object ("System.Windows.Forms.$type")
    foreach ($property in $properties.Keys) {
        $element.$property = $properties[$property]
    }
    if ($onClick -ne $null) {
        $element.Add_Click($onClick)
    }
    return $element
}

# Function to log messages
function Log-Message {
    param (
        [string]$message,
        [string]$level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp [$level] $message"
    Write-Output $logEntry
    $logEntry | Out-File -FilePath $global:logFile -Append
}

# Function to handle errors
function Handle-Error {
    param (
        [string]$operation,
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [System.Management.Automation.ErrorRecord]$exception
    )
    Log-Message "Erro durante ${operation}: $($exception.Exception.Message)" "ERROR"
    Log-Message "Stack Trace: $($exception.Exception.StackTrace)" "ERROR"
}

# Function to start logging
function Start-Logging {
    $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
    $global:logFile = "C:\Relatorio\J365_WIN_tools_${timestamp}.log"
    New-Item -ItemType Directory -Force -Path "C:\Relatorio" | Out-Null
    New-Item -ItemType File -Force -Path $global:logFile | Out-Null
    Log-Message "Inicio da execucao do script"
}

# Function to stop logging
function Stop-Logging {
    Log-Message "Fim da execucao do script"
}

# Create the main form
$form = New-UIElement -type "Form" -properties @{
    Text = "Jornada 365 - Windows Tools"
    Size = New-Object System.Drawing.Size(1020, 800)
    StartPosition = "CenterScreen"
    BackColor = [System.Drawing.Color]::White
    FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
    MaximizeBox = $false
    MinimizeBox = $true
    ShowInTaskbar = $true
    AutoScaleMode = [System.Windows.Forms.AutoScaleMode]::None
}

# Add logo
$logo = New-UIElement -type "PictureBox" -properties @{
    ImageLocation = "https://jornada365.cloud/wp-content/uploads/2024/03/Logotipo-Jornada-365-Home.png"
    SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::Zoom
    Size = New-Object System.Drawing.Size(200, 70)
    Location = New-Object System.Drawing.Point(50, 10)
}
$form.Controls.Add($logo)

# Add title label
$titleLabel = New-UIElement -type "Label" -properties @{
    Text = "Jornada 365 - Windows Tools"
    Font = New-Object System.Drawing.Font("Segoe UI", 28, [System.Drawing.FontStyle]::Bold)
    Size = New-Object System.Drawing.Size(700, 50)
    Location = New-Object System.Drawing.Point(270, 20)
    TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
}
$form.Controls.Add($titleLabel)

# Add subtitle label
$subtitleLabel = New-UIElement -type "Label" -properties @{
    Text = "Sua jornada comeca aqui  |  jornada365.cloud"
    Font = New-Object System.Drawing.Font("Segoe UI", 14)
    Size = New-Object System.Drawing.Size(700, 30)
    Location = New-Object System.Drawing.Point(270, 80)
    TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
}
$form.Controls.Add($subtitleLabel)

# Panel to hold checkboxes
$panel = New-UIElement -type "Panel" -properties @{
    Location = New-Object System.Drawing.Point(10, 150)
    Size = New-Object System.Drawing.Size(1000, 500)
    BackColor = [System.Drawing.Color]::White
}
$form.Controls.Add($panel)

# Categories and checkboxes
$categories = @{
    "Microsoft" = @("Microsoft 365", "Microsoft Teams Trabalho", "Microsoft Teams Pessoal", "PowerShell 7", "Microsoft Graph", "OneDrive", "DotNet", "Microsoft.VCRedist.2015+.x64")
    "Navegadores" = @("Arc", "Firefox", "Chrome", "Opera GX", "Opera One", "Edge", "Vivaldi", "Brave")
    "Utilitarios" = @("7zip", "AnyDesk", "TeamViewer", "Remote Desktop Manager", "FortiClient VPN", "ScreenShot HD", "Lightshot", "Telegram", "Discord", "WhatsApp Web")
    "Sistema" = @("Hyper-V", "Windows SandBox", "Winget", "Atualizar todas as aplicacoes", "Atualizar Windows e Drivers", "Limpeza completa de disco", "Manutencao do Windows", "Modo Alto Desempenho", "Otimizar Windows")
}

# Function to create and align category labels and checkboxes
function Add-CategoryAndCheckboxes {
    param (
        [string]$category,
        [array]$items,
        [int]$xPos,
        [int]$yPos
    )
    $groupBox = New-UIElement -type "GroupBox" -properties @{
        Text = $category
        Font = New-Object System.Drawing.Font("Segoe UI", 12, [System.Drawing.FontStyle]::Bold)
        Location = New-Object System.Drawing.Point($xPos, $yPos)
        Size = New-Object System.Drawing.Size(240, 280)
    }
    $panel.Controls.Add($groupBox)

    $yPos = 20
    foreach ($item in $items) {
        $checkbox = New-UIElement -type "CheckBox" -properties @{
            Text = $item
            Location = New-Object System.Drawing.Point(10, $yPos)
            AutoSize = $true
            Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
            BackColor = [System.Drawing.Color]::White
        }
        $groupBox.Controls.Add($checkbox)
        $global:checkboxes += $checkbox
        $yPos += 30

        # Add tooltip
        $tooltip = New-Object System.Windows.Forms.ToolTip
        $tooltip.SetToolTip($checkbox, "Instalação do $item")
    }
}

# Initialize positions
$initialXPos = 10
$initialYPos = 10
$columnWidth = 250

# Add categories and checkboxes to the panel
$xPos = $initialXPos
foreach ($category in $categories.Keys) {
    Add-CategoryAndCheckboxes -category $category -items $categories[$category] -xPos $xPos -yPos $initialYPos
    $xPos += $columnWidth
    if ($xPos + $columnWidth > $panel.Width) {
        $xPos = $initialXPos
        $initialYPos += 300
    }
}

# Buttons panel
$buttonPanel = New-UIElement -type "Panel" -properties @{
    Location = New-Object System.Drawing.Point(10, 660)
    Size = New-Object System.Drawing.Size(960, 100)
    BackColor = [System.Drawing.Color]::White
}
$form.Controls.Add($buttonPanel)

# Add buttons
$executeAllButton = New-UIElement -type "Button" -properties @{
    Text = "Executar Todos"
    Size = New-Object System.Drawing.Size(200, 40)
    Location = New-Object System.Drawing.Point(80, 10)
    Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
    FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    BackColor = [System.Drawing.Color]::Black
    ForeColor = [System.Drawing.Color]::White
    TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    Cursor = [System.Windows.Forms.Cursors]::Hand
} -onClick {
    foreach ($checkbox in $global:checkboxes) {
        $checkbox.Checked = $true
    }
    Execute-Tasks
}
$buttonPanel.Controls.Add($executeAllButton)

$executeSelectedButton = New-UIElement -type "Button" -properties @{
    Text = "Executar Selecionados"
    Size = New-Object System.Drawing.Size(200, 40)
    Location = New-Object System.Drawing.Point(280, 10)
    Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
    FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    BackColor = [System.Drawing.Color]::Black
    ForeColor = [System.Drawing.Color]::White
    TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    Cursor = [System.Windows.Forms.Cursors]::Hand
} -onClick {
    Execute-Tasks
}
$buttonPanel.Controls.Add($executeSelectedButton)

$selectAllButton = New-UIElement -type "Button" -properties @{
    Text = "Selecionar Todos"
    Size = New-Object System.Drawing.Size(200, 40)
    Location = New-Object System.Drawing.Point(480, 10)
    Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
    FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    BackColor = [System.Drawing.Color]::Black
    ForeColor = [System.Drawing.Color]::White
    TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    Cursor = [System.Windows.Forms.Cursors]::Hand
} -onClick {
    if ($selectAllButton.Text -eq "Selecionar Todos") {
        foreach ($checkbox in $global:checkboxes) {
            $checkbox.Checked = $true
        }
        $selectAllButton.Text = "Desmarcar Todos"
    } else {
        foreach ($checkbox in $global:checkboxes) {
            $checkbox.Checked = $false
        }
        $selectAllButton.Text = "Selecionar Todos"
    }
}
$buttonPanel.Controls.Add($selectAllButton)

$closeButton = New-UIElement -type "Button" -properties @{
    Text = "Encerrar"
    Size = New-Object System.Drawing.Size(200, 40)
    Location = New-Object System.Drawing.Point(680, 10)
    Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Regular)
    FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    BackColor = [System.Drawing.Color]::Black
    ForeColor = [System.Drawing.Color]::White
    TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    Cursor = [System.Windows.Forms.Cursors]::Hand
} -onClick {
    $form.Close()
}
$buttonPanel.Controls.Add($closeButton)

# Add progress label and progress bar
$progressLabel = New-UIElement -type "Label" -properties @{
    Text = "Progresso..."
    Font = New-Object System.Drawing.Font("Segoe UI", 10)
    Location = New-Object System.Drawing.Point(10, 770)
}
$form.Controls.Add($progressLabel)

$progressBar = New-UIElement -type "ProgressBar" -properties @{
    Size = New-Object System.Drawing.Size(960, 20)
    Location = New-Object System.Drawing.Point(10, 800)
    Style = [System.Windows.Forms.ProgressBarStyle]::Continuous
    ForeColor = [System.Drawing.Color]::Blue
}
$form.Controls.Add($progressBar)

# Function to ensure a service is running
function Ensure-ServiceRunning {
    param (
        [string]$serviceName
    )
    try {
        Log-Message "Verificando status do serviço: ${serviceName}"
        $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
        if ($service.Status -ne 'Running') {
            Log-Message "Iniciando serviço: ${serviceName}"
            Start-Service -Name $serviceName
            Log-Message "${serviceName} iniciado."
        } else {
            Log-Message "${serviceName} já está em execução."
        }
    } catch {
        Handle-Error -operation "verificar ou iniciar o serviço ${serviceName}" -exception $_
    }
}

# Function to stop a service if running
function Stop-ServiceIfRunning {
    param (
        [string]$serviceName
    )
    try {
        Log-Message "Verificando status do serviço: ${serviceName}"
        $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
        if ($service.Status -eq 'Running') {
            Log-Message "Parando serviço: ${serviceName}"
            Stop-Service -Name $serviceName -Force
            Log-Message "${serviceName} parado."
        } else {
            Log-Message "${serviceName} já está parado."
        }
    } catch {
        Handle-Error -operation "verificar ou parar o serviço ${serviceName}" -exception $_
    }
}

# Function to ensure Winget is installed
function Ensure-WingetInstalled {
    try {
        Log-Message "Verificando se Winget está instalado..."
        if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
            Log-Message "Winget não encontrado, instalando..."
            Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:temp\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
            Add-AppxPackage -Path "$env:temp\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
        } else {
            Log-Message "Winget já está instalado."
        }
    } catch {
        Handle-Error -operation "verificar ou instalar Winget" -exception $_
    }
}

# Function to ensure Scoop is installed
function Ensure-ScoopInstalled {
    try {
        Log-Message "Verificando se Scoop está instalado..."
        if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
            Log-Message "Scoop não encontrado, instalando..."
            Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
            Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
            Log-Message "Scoop instalado."
        } else {
            Log-Message "Scoop já está instalado."
        }
    } catch {
        Handle-Error -operation "verificar ou instalar Scoop" -exception $_
    }
}

# Function to install or update applications
function InstallOrUpdate-Application {
    param (
        [string]$appId,
        [string]$packageManager = "winget"
    )
    try {
        Log-Message "Verificando instalação ou atualização do aplicativo: ${appId} com ${packageManager}"
        if ($packageManager -eq "winget") {
            $installedApp = winget list | Where-Object { $_ -match $appId }
        } elseif ($packageManager -eq "choco") {
            $installedApp = choco list --local-only | Where-Object { $_ -match $appId }
        }
        if ($installedApp) {
            Log-Message "Aplicativo ${appId} encontrado. Atualizando..."
            Start-Process $packageManager -ArgumentList "upgrade --id $appId --silent --accept-package-agreements --accept-source-agreements --force" -NoNewWindow -Wait
        } else {
            Log-Message "Instalando aplicativo: ${appId}"
            Start-Process $packageManager -ArgumentList "install --id $appId --silent --accept-package-agreements --accept-source-agreements --force" -NoNewWindow -Wait
        }
    } catch {
        Handle-Error -operation "instalar ou atualizar o aplicativo ${appId} com ${packageManager}" -exception $_
    }
}

# Function to update all applications
function Update-AllApplications {
    try {
        Log-Message "Atualizando todas as aplicações..."
        Ensure-WingetInstalled
        Ensure-ChocolateyInstalled
        Ensure-ScoopInstalled
        Start-Process "winget" -ArgumentList "source update" -NoNewWindow -Wait
        Start-Process "winget" -ArgumentList "upgrade winget" -NoNewWindow -Wait
        Start-Process "winget" -ArgumentList "upgrade --all --silent --accept-package-agreements --accept-source-agreements --force --include-unknown" -NoNewWindow -Wait
        Start-Process "choco" -ArgumentList "upgrade all -y --force" -NoNewWindow -Wait
        Start-Process "scoop" -ArgumentList "update *" -NoNewWindow -Wait
    } catch {
        Handle-Error -operation "atualizar todas as aplicações" -exception $_
    }

    # Update Pip packages
    try {
        Log-Message "Atualizando pacotes pip..."
        Start-Process "pip" -ArgumentList "install --upgrade pip" -NoNewWindow -Wait
        Start-Process "pip" -ArgumentList "list --outdated --format=freeze | %{$_.split('==')[0]} | % {pip install --upgrade $_}" -NoNewWindow -Wait
    } catch {
        Handle-Error -operation "atualizar pacotes pip" -exception $_
    }

    # Update npm packages
    try {
        Log-Message "Atualizando pacotes npm..."
        Start-Process "winget" -ArgumentList "install --id OpenJS.NodeJS.LTS --silent --accept-package-agreements --accept-source-agreements --force" -NoNewWindow -Wait
    } catch {
        Handle-Error -operation "atualizar pacotes npm" -exception $_
    }
}

# Function to update Windows and drivers
function Update-WindowsAndDrivers {
    Log-Message "Atualizando Windows e drivers..."

    # Ensure BITS and Windows Installer services are running
    Ensure-ServiceRunning -serviceName "BITS"
    Ensure-ServiceRunning -serviceName "msiserver"
    Ensure-ServiceRunning -serviceName "wuauserv"

    # Windows Update - including optional updates and fixing common problems
    try {
        Write-Host "Executando atualizacoes do Windows..."
        Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -AutoReboot
    } catch {
        Handle-Error -operation "atualização do Windows" -exception $_
    }

    # Fix common Windows Update issues
    $updateFixes = @(
        "net stop wuauserv",
        "net stop cryptSvc",
        "net stop bits",
        "net stop msiserver",
        {
            try {
                Stop-ServiceIfRunning -serviceName "wuauserv"
                $destPath1 = "C:\Windows\SoftwareDistribution"
                if (Test-Path -Path $destPath1) {
                    Remove-Item -Path $destPath1 -Recurse -Force
                }
                Ensure-ServiceRunning -serviceName "wuauserv"
            } catch {
                Handle-Error -operation "mover SoftwareDistribution" -exception $_
            }
        },
        {
            try {
                Stop-ServiceIfRunning -serviceName "cryptSvc"
                $destPath2 = "C:\Windows\System32\catroot2"
                if (Test-Path -Path $destPath2) {
                    Remove-Item -Path $destPath2 -Recurse -Force
                }
                Ensure-ServiceRunning -serviceName "cryptSvc"
            } catch {
                Handle-Error -operation "mover catroot2" -exception $_
            }
        },
        "net start wuauserv",
        "net start cryptSvc",
        "net start bits",
        "net start msiserver"
    )

    foreach ($fix in $updateFixes) {
        try {
            Log-Message "Executando comando: ${fix}"
            if ($fix -is [ScriptBlock]) {
                & $fix
            } else {
                Invoke-Expression $fix
            }
        } catch {
            Handle-Error -operation ("executar comando {0}" -f $fix) -exception $_
        }
    }
}

# Function to perform a complete disk cleanup
function Complete-DiskCleanup {
    try {
        Log-Message "Executando limpeza completa de disco..."
        Cleanmgr /sagerun:1
    } catch {
        Handle-Error -operation "limpeza completa de disco" -exception $_
    }
}

# Function to clean temporary files and cache
function Clean-TemporaryFiles {
    Log-Message "Limpando arquivos temporários e cache..."
    $tempPaths = @(
        "$env:LOCALAPPDATA\Temp\*",
        "$env:windir\Temp\*",
        "$env:SystemRoot\Prefetch\*",
        "$env:USERPROFILE\AppData\Local\Microsoft\Windows\INetCache\*",
        "$env:USERPROFILE\AppData\Local\Microsoft\Windows\INetCookies\*"
    )
    foreach ($path in $tempPaths) {
        try {
            Log-Message "Limpando: ${path}"
            Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
        } catch {
            Handle-Error -operation ("limpar {0}" -f $path) -exception $_
        }
    }
    Log-Message "Limpeza de arquivos temporários e cache concluída."
}

# Function to activate Hyper-V
function Activate-HyperV {
    try {
        Log-Message "Verificando se o Hyper-V pode ser ativado..."
        $windowsEdition = (Get-WmiObject -Class Win32_OperatingSystem).Caption
        if ($windowsEdition -match "Windows 10 Home") {
            Log-Message "Hyper-V não é suportado no Windows 10 Home."
        } else {
            Log-Message "Ativando Hyper-V..."
            Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -NoRestart
            Log-Message "Hyper-V ativado."
        }
    } catch {
        Handle-Error -operation "ativar Hyper-V" -exception $_
    }
}

# Function to install Windows Sandbox
function Install-WindowsSandbox {
    try {
        Log-Message "Instalando Windows Sandbox..."
        Enable-WindowsOptionalFeature -Online -FeatureName "Containers-DisposableClientVM" -NoRestart
        Log-Message "Windows Sandbox instalado."
    } catch {
        Handle-Error -operation "instalar Windows Sandbox" -exception $_
    }
}

# Function to apply high performance power plan settings
function Apply-HighPerformanceSettings {
    try {
        Log-Message "Aplicando configurações de alto desempenho..."
        REG ADD HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoClose /t REG_DWORD /d 0 /f
        REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Power /v CsEnabled /t REG_DWORD /d 0 /f
        Log-Message "Configurações de alto desempenho aplicadas. Reinicie o computador para concluir a configuração."
    } catch {
        Handle-Error -operation "aplicar configurações de alto desempenho" -exception $_
    }
}

# Function to perform system maintenance
function Perform-WindowsMaintenance {
    Log-Message "Executando manutenção do Windows..."
    $timestamp = Get-Date -Format "dd_MM_yyyy_HH_mm"
    $maintenanceLog = "C:\Relatorio\J365_WIN_Maintenance_${timestamp}.txt"

    if (-not (Test-Path $maintenanceLog) -or ((Get-Date) - (Get-Item $maintenanceLog).LastWriteTime).TotalHours -gt 1) {
        try {
            Start-Process "sfc" -ArgumentList "/scannow" -NoNewWindow -Wait
            Start-Process "DISM" -ArgumentList "/Online /Cleanup-Image /RestoreHealth" -NoNewWindow -Wait
            Start-Process "DISM" -ArgumentList "/Online /Cleanup-Image /StartComponentCleanup" -NoNewWindow -Wait
            Log-Message "Manutenção do Windows concluída."
            Log-Message "Atualizando políticas de grupo..."
            gpupdate /force | Out-File -FilePath $maintenanceLog -Append
            Log-Message "Limpando DNS..."
            ipconfig /flushdns | Out-File -FilePath $maintenanceLog -Append
        } catch {
            Handle-Error -operation "manutenção do Windows" -exception $_
        }
    } else {
        Log-Message "Manutenção do Windows já realizada recentemente. Pulando etapa."
    }
}

# Function to optimize Windows for performance
function Optimize-Windows {
    Log-Message "Otimizando o Windows para desempenho..."

    # Set visual effects for best performance
    try {
        $visualEffectsKey = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
        Set-ItemProperty -Path $visualEffectsKey -Name "VisualFXSetting" -Value 2
    } catch {
        Handle-Error -operation "configurar os efeitos visuais" -exception $_
    }

    Log-Message "Otimização do Windows concluída."
}

# Function to install or update Chocolatey
function Ensure-ChocolateyInstalled {
    try {
        Log-Message "Verificando se Chocolatey está instalado..."
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Log-Message "Chocolatey não encontrado, instalando..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            Log-Message "Chocolatey instalado."
        } else {
            Log-Message "Chocolatey já está instalado. Atualizando..."
            choco upgrade chocolatey -y --force
        }
    } catch {
        if ($_.Exception.Message -match "An existing Chocolatey installation was detected") {
            Log-Message "Instalação existente do Chocolatey detectada. Atualizando em vez de instalar." "WARNING"
            try {
                choco upgrade chocolatey -y --force
            } catch {
                Handle-Error -operation "atualizar Chocolatey" -exception $_
            }
        } else {
            Handle-Error -operation "verificar ou instalar Chocolatey" -exception $_
        }
    }
}

# Function to force close processes
function Force-CloseProcesses {
    param (
        [string]$processName
    )
    Get-Process -Name $processName -ErrorAction SilentlyContinue | Stop-Process -Force
}

# Function to execute tasks based on selected checkboxes
function Execute-Tasks {
    Start-Logging

    $progressLabel.Text = "Iniciando..."
    $progressBar.Value = 0

    $completedTasks = 0
    $totalTasks = ($global:checkboxes | Where-Object { $_.Checked }).Count

    foreach ($checkbox in $global:checkboxes) {
        if ($checkbox.Checked) {
            $progressLabel.Text = "Executando $($checkbox.Text)..."
            Log-Message "Executando $($checkbox.Text)..."

            try {
                switch ($checkbox.Text) {
                    "Microsoft 365" { InstallOrUpdate-Application "Microsoft.Office" }
                    "Microsoft Teams Trabalho" { InstallOrUpdate-Application "Microsoft.Teams" }
                    "Microsoft Teams Pessoal" { InstallOrUpdate-Application "Microsoft.Teams.Free" }
                    "PowerShell 7" { InstallOrUpdate-Application "Microsoft.PowerShell" }
                    "Microsoft Graph" { InstallOrUpdate-Application "Microsoft.Graph" }
                    "OneDrive" { InstallOrUpdate-Application "Microsoft.OneDrive" }
                    "DotNet" { InstallOrUpdate-Application "Microsoft.DotNet" }
                    "Microsoft.VCRedist.2015+.x64" { InstallOrUpdate-Application "Microsoft.VCRedist.2015+.x64" }
                    "Arc" { InstallOrUpdate-Application "Arc.Browser" }
                    "Firefox" { InstallOrUpdate-Application "Mozilla.Firefox" }
                    "Chrome" { InstallOrUpdate-Application "Google.Chrome" }
                    "Opera GX" { InstallOrUpdate-Application "Opera.GX" }
                    "Opera One" { InstallOrUpdate-Application "Opera.One" }
                    "Edge" { InstallOrUpdate-Application "Microsoft.Edge" }
                    "Vivaldi" { InstallOrUpdate-Application "Vivaldi.Browser" }
                    "Brave" { InstallOrUpdate-Application "Brave.Browser" }
                    "7zip" { InstallOrUpdate-Application "7zip.7zip" }
                    "AnyDesk" { InstallOrUpdate-Application "AnyDesk.SoftwareGmbH" }
                    "TeamViewer" { InstallOrUpdate-Application "TeamViewer.TeamViewer" }
                    "Remote Desktop Manager" { InstallOrUpdate-Application "Devolutions.RemoteDesktopManager" }
                    "FortiClient VPN" { InstallOrUpdate-Application "Fortinet.FortiClientVPN" }
                    "ScreenShot HD" { InstallOrUpdate-Application "Screenpresso.Screenpresso" }
                    "Lightshot" { InstallOrUpdate-Application "Skillbrains.Lightshot" }
                    "Telegram" { InstallOrUpdate-Application "Telegram.TelegramDesktop" }
                    "Discord" { InstallOrUpdate-Application "Discord.Discord" }
                    "WhatsApp Web" { InstallOrUpdate-Application "WhatsApp.WhatsAppDesktop" }
                    "Hyper-V" { Activate-HyperV }
                    "Windows SandBox" { Install-WindowsSandbox }
                    "Winget" { Ensure-WingetInstalled }
                    "Atualizar todas as aplicacoes" { Update-AllApplications }
                    "Atualizar Windows e Drivers" { Update-WindowsAndDrivers }
                    "Limpeza completa de disco" { Complete-DiskCleanup }
                    "Manutencao do Windows" { Perform-WindowsMaintenance }
                    "Modo Alto Desempenho" { Apply-HighPerformanceSettings }
                    "Otimizar Windows" { Optimize-Windows }
                    default { Log-Message "Tarefa desconhecida: $($checkbox.Text)" "WARNING" }
                }
            } catch {
                Handle-Error -operation "executar $($checkbox.Text)" -exception $_
            }

            $completedTasks++
            $progressBar.Value = [math]::Round(($completedTasks / $totalTasks) * 100)
        }
    }

    $progressLabel.Text = "Conclusão..."
    $progressBar.Value = 100
    Log-Message "Todas as operações foram concluídas com sucesso."
    Stop-Logging
}

# Run the form
[void]$form.ShowDialog()
